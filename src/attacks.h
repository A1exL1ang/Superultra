#pragma once

#include "types.h"
#include "helpers.h"

// Line lookup (too big to declare in compile time)
extern Bitboard lineBB[64][64];

// All bits in certain ranks/files
const Bitboard allInRank[8] = {255ULL, 65280ULL, 16711680ULL, 4278190080ULL, 1095216660480ULL, 280375465082880ULL, 71776119061217280ULL, 18374686479671623680ULL};
const Bitboard allInFile[8] = {72340172838076673ULL, 144680345676153346ULL, 289360691352306692ULL, 578721382704613384ULL, 1157442765409226768ULL, 2314885530818453536ULL, 4629771061636907072ULL, 9259542123273814144ULL};

// Basic attack masks
const Bitboard pawnAttackArray[64][2] = {{512ULL, 0ULL}, {1280ULL, 0ULL}, {2560ULL, 0ULL}, {5120ULL, 0ULL}, {10240ULL, 0ULL}, {20480ULL, 0ULL}, {40960ULL, 0ULL}, {16384ULL, 0ULL}, {131072ULL, 2ULL}, {327680ULL, 5ULL}, {655360ULL, 10ULL}, {1310720ULL, 20ULL}, {2621440ULL, 40ULL}, {5242880ULL, 80ULL}, {10485760ULL, 160ULL}, {4194304ULL, 64ULL}, {33554432ULL, 512ULL}, {83886080ULL, 1280ULL}, {167772160ULL, 2560ULL}, {335544320ULL, 5120ULL}, {671088640ULL, 10240ULL}, {1342177280ULL, 20480ULL}, {2684354560ULL, 40960ULL}, {1073741824ULL, 16384ULL}, {8589934592ULL, 131072ULL}, {21474836480ULL, 327680ULL}, {42949672960ULL, 655360ULL}, {85899345920ULL, 1310720ULL}, {171798691840ULL, 2621440ULL}, {343597383680ULL, 5242880ULL}, {687194767360ULL, 10485760ULL}, {274877906944ULL, 4194304ULL}, {2199023255552ULL, 33554432ULL}, {5497558138880ULL, 83886080ULL}, {10995116277760ULL, 167772160ULL}, {21990232555520ULL, 335544320ULL}, {43980465111040ULL, 671088640ULL}, {87960930222080ULL, 1342177280ULL}, {175921860444160ULL, 2684354560ULL}, {70368744177664ULL, 1073741824ULL}, {562949953421312ULL, 8589934592ULL}, {1407374883553280ULL, 21474836480ULL}, {2814749767106560ULL, 42949672960ULL}, {5629499534213120ULL, 85899345920ULL}, {11258999068426240ULL, 171798691840ULL}, {22517998136852480ULL, 343597383680ULL}, {45035996273704960ULL, 687194767360ULL}, {18014398509481984ULL, 274877906944ULL}, {144115188075855872ULL, 2199023255552ULL}, {360287970189639680ULL, 5497558138880ULL}, {720575940379279360ULL, 10995116277760ULL}, {1441151880758558720ULL, 21990232555520ULL}, {2882303761517117440ULL, 43980465111040ULL}, {5764607523034234880ULL, 87960930222080ULL}, {11529215046068469760ULL, 175921860444160ULL}, {4611686018427387904ULL, 70368744177664ULL}, {0ULL, 562949953421312ULL}, {0ULL, 1407374883553280ULL}, {0ULL, 2814749767106560ULL}, {0ULL, 5629499534213120ULL}, {0ULL, 11258999068426240ULL}, {0ULL, 22517998136852480ULL}, {0ULL, 45035996273704960ULL}, {0ULL, 18014398509481984ULL}};
const Bitboard knightAttackArray[64] = {132096ULL, 329728ULL, 659712ULL, 1319424ULL, 2638848ULL, 5277696ULL, 10489856ULL, 4202496ULL, 33816580ULL, 84410376ULL, 168886289ULL, 337772578ULL, 675545156ULL, 1351090312ULL, 2685403152ULL, 1075839008ULL, 8657044482ULL, 21609056261ULL, 43234889994ULL, 86469779988ULL, 172939559976ULL, 345879119952ULL, 687463207072ULL, 275414786112ULL, 2216203387392ULL, 5531918402816ULL, 11068131838464ULL, 22136263676928ULL, 44272527353856ULL, 88545054707712ULL, 175990581010432ULL, 70506185244672ULL, 567348067172352ULL, 1416171111120896ULL, 2833441750646784ULL, 5666883501293568ULL, 11333767002587136ULL, 22667534005174272ULL, 45053588738670592ULL, 18049583422636032ULL, 145241105196122112ULL, 362539804446949376ULL, 725361088165576704ULL, 1450722176331153408ULL, 2901444352662306816ULL, 5802888705324613632ULL, 11533718717099671552ULL, 4620693356194824192ULL, 288234782788157440ULL, 576469569871282176ULL, 1224997833292120064ULL, 2449995666584240128ULL, 4899991333168480256ULL, 9799982666336960512ULL, 1152939783987658752ULL, 2305878468463689728ULL, 1128098930098176ULL, 2257297371824128ULL, 4796069720358912ULL, 9592139440717824ULL, 19184278881435648ULL, 38368557762871296ULL, 4679521487814656ULL, 9077567998918656ULL};
const Bitboard kingAttackArray[64] = {770ULL, 1797ULL, 3594ULL, 7188ULL, 14376ULL, 28752ULL, 57504ULL, 49216ULL, 197123ULL, 460039ULL, 920078ULL, 1840156ULL, 3680312ULL, 7360624ULL, 14721248ULL, 12599488ULL, 50463488ULL, 117769984ULL, 235539968ULL, 471079936ULL, 942159872ULL, 1884319744ULL, 3768639488ULL, 3225468928ULL, 12918652928ULL, 30149115904ULL, 60298231808ULL, 120596463616ULL, 241192927232ULL, 482385854464ULL, 964771708928ULL, 825720045568ULL, 3307175149568ULL, 7718173671424ULL, 15436347342848ULL, 30872694685696ULL, 61745389371392ULL, 123490778742784ULL, 246981557485568ULL, 211384331665408ULL, 846636838289408ULL, 1975852459884544ULL, 3951704919769088ULL, 7903409839538176ULL, 15806819679076352ULL, 31613639358152704ULL, 63227278716305408ULL, 54114388906344448ULL, 216739030602088448ULL, 505818229730443264ULL, 1011636459460886528ULL, 2023272918921773056ULL, 4046545837843546112ULL, 8093091675687092224ULL, 16186183351374184448ULL, 13853283560024178688ULL, 144959613005987840ULL, 362258295026614272ULL, 724516590053228544ULL, 1449033180106457088ULL, 2898066360212914176ULL, 5796132720425828352ULL, 11592265440851656704ULL, 4665729213955833856ULL};

// Slider magic numbers
const uint64 bishopMagic[64] = {4521200542023712ULL, 2891319761176635776ULL, 1249758328351883282ULL, 9224568651267451456ULL, 3534218122427893508ULL, 2306142110803492864ULL, 431118349248512ULL, 18722632208760833ULL, 4684977437115715720ULL, 4508633398265346ULL, 2468003386722226176ULL, 9799872388798627856ULL, 9367489467172257796ULL, 2742710870273493248ULL, 4647720360385471500ULL, 9223526316386033664ULL, 13586940339224864ULL, 9804339696212902156ULL, 22518006768861704ULL, 140772083122176ULL, 144396682652550673ULL, 1688851068486664ULL, 562985408143360ULL, 2306126685365862914ULL, 153712430766147588ULL, 54360409198830852ULL, 1801589393387954720ULL, 72629344446464008ULL, 216317917724188673ULL, 18157337185427584ULL, 11260098589919249ULL, 72340168559845637ULL, 2289463037330432ULL, 5838078779793100800ULL, 901287419503968385ULL, 356379340833024ULL, 297239776577266816ULL, 1267745505214594ULL, 9224524326252872768ULL, 295269475362570320ULL, 848960952468496ULL, 4617316622441394180ULL, 2306408162523350025ULL, 9511602825608562704ULL, 72062026713770496ULL, 901847476896531200ULL, 9374262450242846792ULL, 4614083507860340808ULL, 288516257802625568ULL, 1689279424364544ULL, 9224503436629770241ULL, 37189883514847424ULL, 6345571948148686854ULL, 1147959165452416ULL, 40534630046367744ULL, 3748125224466513924ULL, 38844788166004736ULL, 4913432694379649024ULL, 36046802069491712ULL, 23708257357320ULL, 4629700417206485508ULL, 6759952660302080ULL, 1465364535686540290ULL, 4961030849462352ULL};
const uint64 rookMagic[64] = {36038417747837040ULL, 18014535966261312ULL, 684582329074614792ULL, 4683753508607102978ULL, 9259409634328838784ULL, 648527421608034322ULL, 1188952500665846912ULL, 72060484550950978ULL, 72198342276285600ULL, 288300747581293632ULL, 4611826824641511552ULL, 11673471006000812032ULL, 9223653584862976000ULL, 4647855561541681280ULL, 288511864015733248ULL, 2594354863572386048ULL, 3494797983768518656ULL, 581246927492907552ULL, 1155597166689980416ULL, 4899926290452250656ULL, 576743326925982993ULL, 3603022088752874496ULL, 1155186498741800968ULL, 4613940017272800261ULL, 140739637952512ULL, 4611756389321146496ULL, 2319388994616428672ULL, 54326908184166688ULL, 866947337053274240ULL, 564126775531524ULL, 83317709798379530ULL, 5767000635861967444ULL, 70918516777217ULL, 2323998420097835012ULL, 5476518021818224641ULL, 286010613174272ULL, 2891452798040416320ULL, 2671197546172416002ULL, 4611863108586047682ULL, 36029810664801921ULL, 10412335808035438592ULL, 10394325566560935938ULL, 288529443851370624ULL, 38483175473192ULL, 326511076415963152ULL, 1153485623933403144ULL, 9513856416279167120ULL, 5270341932881936419ULL, 4574004417396864ULL, 289426646969090176ULL, 44261790843392ULL, 474991171207296ULL, 422246858621056ULL, 2306407093307183616ULL, 2458976460531565568ULL, 1153066642307629568ULL, 75868449955985ULL, 141837289390369ULL, 40867748229693721ULL, 10982203681939654821ULL, 289638069802370097ULL, 39125073302521913ULL, 10718575986562039940ULL, 9224506872458642498ULL};

// Slider magic shifts
const int8 bishopMagicShift[64] = {6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 5, 5, 5, 5, 7, 9, 9, 7, 5, 5, 5, 5, 7, 9, 9, 7, 5, 5, 5, 5, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6};
const int8 rookMagicShift[64] = {12, 11, 11, 11, 11, 11, 11, 12, 11, 10, 10, 10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 11, 12, 11, 11, 11, 11, 11, 11, 12};

// Slider magic masks (attack on an empty board excluding border cells and itself)
const Bitboard bishopMagicMask[64] = {};
const Bitboard rookMagicMask[64] = {};

// Slider magic lookup (too big to declare in compile time)
extern Bitboard bishopMagicCache[64][512];
extern Bitboard rookMagicCache[64][4096];

// We create an "interface" of inlined functions (to be consistent)
inline Bitboard between(Square sq1, Square sq2){
    return lineBB[sq1][sq2];
}

inline Bitboard knightAttack(Square sq){
    return knightAttackArray[sq];
}

inline Bitboard bishopAttack(Square sq, Bitboard occupancy){
    return bishopMagicCache[sq][((occupancy & bishopMagicMask[sq]) * bishopMagic[sq]) >> (64 - bishopMagicShift[sq])];
}

inline Bitboard rookAttack(Square sq, Bitboard occupancy){
    return rookMagicCache[sq][((occupancy & rookMagicMask[sq]) * rookMagic[sq]) >> (64 - rookMagicShift[sq])];
}

inline Bitboard queenAttack(Square sq, Bitboard occupancy){
    return bishopAttack(sq, occupancy) | rookAttack(sq, occupancy);
}

inline Bitboard pawnAttack(Square sq, Color col){
    return pawnAttackArray[sq][col];
}

inline Bitboard pawnsLeftAttack(Bitboard pawnMask, Color col){ 
    return col == white ? ((pawnMask & (~allInFile[fileA])) << 7) : ((pawnMask & (~allInFile[fileA])) >> 9);
}

inline Bitboard pawnsRightAttack(Bitboard pawnMask, Color col){
    return col == white ? ((pawnMask & (~allInFile[fileH])) << 9) : ((pawnMask & (~allInFile[fileH])) >> 7);
}

inline Bitboard pawnsAllAttack(Bitboard pawnMask, Color col){
    return (pawnsLeftAttack(pawnMask, col) | pawnsRightAttack(pawnMask, col));
}

inline Bitboard pawnsUp(Bitboard pawnMask, Color col){
    return col == white ? (pawnMask << 8) : (pawnMask >> 8);
}

inline Bitboard kingAttack(Square sq){
    return kingAttackArray[sq];
}

// Initalize the big arrays during runtime
void initLineBB();
void initMagicCache();